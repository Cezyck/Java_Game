package edu.game;

import edu.engine.Keys;
import edu.engine.SceneController;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class Player {
    private static final Image SPRITE = new Image("/Models/player-ship.png");
    private double x, y;
    private final double WIDTH = 120;
    private final double HEIGHT = 100;
    private  int lives = 3;
    private final List<Bullet> bullets = new ArrayList<>();

    private long lastShotTime = 0;
    private static final long SHOOT_DELAY = 400_000_000; // 0.4 —Å–µ–∫

    public Player(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public void update(double dt, long now, Keys keys, List<Enemy> enemies) {
        double moveX = 0, moveY = 0;

        // üîß —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: WASD
        if (keys.isDown(KeyCode.A)) moveX -= 1;
        if (keys.isDown(KeyCode.D)) moveX += 1;
        if (keys.isDown(KeyCode.W)) moveY -= 1;
        if (keys.isDown(KeyCode.S)) moveY += 1;

        // ‚û°Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ
        double speed = 250;
        x += moveX * speed * dt;
        y += moveY * speed * dt;

        // üîß –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å)
        x = Math.max(0, Math.min(x, SceneController.WIDTH - WIDTH));

        // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Y (–¥–µ—Ä–∂–∏–º –∫–æ—Ä–∞–±–ª—å –ø–æ–¥ –≤—Ä–∞–≥–∞–º–∏)
        double topBoundary = getTopBoundary(enemies);

        // üîß –ì—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å)
        // –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å—Å—è –í–´–®–ï (y < topBoundary)
        // –ò –Ω–µ –º–æ–∂–µ—Ç –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –ù–ò–ñ–ï (y > H - HEIGHT)
        y = Math.max(topBoundary, Math.min(y, SceneController.HEIGHT - HEIGHT));

        // üî´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª—å
        bullets.removeIf(b -> !b.update(dt));

        // üî´ –°—Ç—Ä–µ–ª—å–±–∞ –Ω–∞ SPACE
        if (keys.isDown(KeyCode.SPACE)) {
            shoot(now);
        }
    }

    private static double getTopBoundary(List<Enemy> enemies) {
        double maxEnemyBottomY = 0; // –ò—â–µ–º "–¥–Ω–æ" —Å–∞–º–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ –∂–∏–≤–æ–≥–æ –≤—Ä–∞–≥–∞
        for (Enemy e : enemies) {
            if (e.isAlive()) { // –ï—Å–ª–∏ –≤—Ä–∞–≥ –∂–∏–≤, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ
                maxEnemyBottomY = Math.max(maxEnemyBottomY, e.getY() + e.getHeight());
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–±–∞—Ä—å–µ—Ä" (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞)
        // –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 20px –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–≥–æ –≤—Ä–∞–≥–∞ (–µ—Å–ª–∏ –≤—Ä–∞–≥–∏ –µ—Å—Ç—å)
        // –ï—Å–ª–∏ –≤—Ä–∞–≥–æ–≤ –Ω–µ—Ç (maxEnemyBottomY = 0), —Ç–æ topBoundary = 0 (–≤–µ—Ä—Ö —ç–∫—Ä–∞–Ω–∞).
        return (maxEnemyBottomY > 0) ? (maxEnemyBottomY + 20) : 0;
    }

    private void shoot(long now) {
        if (now - lastShotTime > SHOOT_DELAY) {
            // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (-600) –¥–ª—è –ø–æ–ª–µ—Ç–∞ –≤–≤–µ—Ä—Ö
            bullets.add(new Bullet(x + WIDTH / 2 - 2, y - 10, -600));
            lastShotTime = now;
        }
    }

    public  void takeDamage(){
        if(lives > 0){
            lives--;
        }
    }


    public void render(GraphicsContext g) {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        g.drawImage(SPRITE, x, y, WIDTH, HEIGHT);

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è
        for (Bullet b : bullets) b.render(g);
    }

    public int getLives() {
        return lives;
    }

    public double getX() {
        return x;
    }

    public double getWidth() {
        return WIDTH;
    }

    public double getHeight() {
        return HEIGHT;
    }

    public boolean isAlive() {
        return lives > 0;
    }

    public List<Bullet> getBullets() {
        return bullets;
    }

    public double getY() {
        return y;
    }
    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∏–≥—Ä–æ–∫–∞
    public boolean collidesWith(Bullet Bullet) {
        return Bullet.getX() >= x &&
                Bullet.getX() <= x + WIDTH &&
                Bullet.getY() >= y &&
                Bullet.getY() <= y + HEIGHT;
    }

}